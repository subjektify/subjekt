// Generated from src/grammar/subjekt.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class subjektLexer extends Lexer {
	public static readonly AT_SIGN = 1;
	public static readonly LPAREN = 2;
	public static readonly RPAREN = 3;
	public static readonly LBRACK = 4;
	public static readonly RBRACK = 5;
	public static readonly LCURLY = 6;
	public static readonly RCURLY = 7;
	public static readonly ASSIGNMENT = 8;
	public static readonly COLON = 9;
	public static readonly COMMA = 10;
	public static readonly HASH_SIGN = 11;
	public static readonly DOLLAR_SIGN = 12;
	public static readonly SEMICOLON = 13;
	public static readonly IdentifierChars = 14;
	public static readonly SINGLE_STRING = 15;
	public static readonly DOUBLE_STRING = 16;
	public static readonly NUMBER = 17;
	public static readonly WS = 18;
	public static readonly COMMENT = 19;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"AT_SIGN", "LPAREN", "RPAREN", "LBRACK", "RBRACK", "LCURLY", "RCURLY", 
		"ASSIGNMENT", "COLON", "COMMA", "HASH_SIGN", "DOLLAR_SIGN", "SEMICOLON", 
		"IdentifierChars", "SINGLE_STRING", "DOUBLE_STRING", "NUMBER", "WS", "COMMENT",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'@'", "'('", "')'", "'['", "']'", "'{'", "'}'", "'='", "':'", 
		"','", "'#'", "'$'", "';'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "AT_SIGN", "LPAREN", "RPAREN", "LBRACK", "RBRACK", "LCURLY", 
		"RCURLY", "ASSIGNMENT", "COLON", "COMMA", "HASH_SIGN", "DOLLAR_SIGN", 
		"SEMICOLON", "IdentifierChars", "SINGLE_STRING", "DOUBLE_STRING", "NUMBER", 
		"WS", "COMMENT",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(subjektLexer._LITERAL_NAMES, subjektLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return subjektLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(subjektLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "subjekt.g4"; }

	// @Override
	public get ruleNames(): string[] { return subjektLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return subjektLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return subjektLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return subjektLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x15w\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03" +
		"\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t" +
		"\x03\t\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E" +
		"\x03\x0E\x03\x0E\x03\x0F\x06\x0FG\n\x0F\r\x0F\x0E\x0FH\x03\x0F\x07\x0F" +
		"L\n\x0F\f\x0F\x0E\x0FO\v\x0F\x03\x10\x03\x10\x06\x10S\n\x10\r\x10\x0E" +
		"\x10T\x03\x10\x03\x10\x03\x11\x03\x11\x06\x11[\n\x11\r\x11\x0E\x11\\\x03" +
		"\x11\x03\x11\x03\x12\x06\x12b\n\x12\r\x12\x0E\x12c\x03\x13\x06\x13g\n" +
		"\x13\r\x13\x0E\x13h\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x14\x07" +
		"\x14q\n\x14\f\x14\x0E\x14t\v\x14\x03\x14\x03\x14\x02\x02\x02\x15\x03\x02" +
		"\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11" +
		"\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10" +
		"\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14\'\x02\x15\x03\x02\t\x05\x02C\\" +
		"aac|\x06\x022;C\\aac|\x03\x02))\x03\x02$$\x03\x022;\x05\x02\v\f\x0F\x0F" +
		"\"\"\x04\x02\f\f\x0F\x0F\x02}\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02" +
		"\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02" +
		"\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02" +
		"\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02" +
		"\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02" +
		"\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02" +
		"\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x03)\x03\x02\x02\x02\x05+" +
		"\x03\x02\x02\x02\x07-\x03\x02\x02\x02\t/\x03\x02\x02\x02\v1\x03\x02\x02" +
		"\x02\r3\x03\x02\x02\x02\x0F5\x03\x02\x02\x02\x117\x03\x02\x02\x02\x13" +
		"9\x03\x02\x02\x02\x15;\x03\x02\x02\x02\x17=\x03\x02\x02\x02\x19?\x03\x02" +
		"\x02\x02\x1BA\x03\x02\x02\x02\x1DF\x03\x02\x02\x02\x1FP\x03\x02\x02\x02" +
		"!X\x03\x02\x02\x02#a\x03\x02\x02\x02%f\x03\x02\x02\x02\'l\x03\x02\x02" +
		"\x02)*\x07B\x02\x02*\x04\x03\x02\x02\x02+,\x07*\x02\x02,\x06\x03\x02\x02" +
		"\x02-.\x07+\x02\x02.\b\x03\x02\x02\x02/0\x07]\x02\x020\n\x03\x02\x02\x02" +
		"12\x07_\x02\x022\f\x03\x02\x02\x0234\x07}\x02\x024\x0E\x03\x02\x02\x02" +
		"56\x07\x7F\x02\x026\x10\x03\x02\x02\x0278\x07?\x02\x028\x12\x03\x02\x02" +
		"\x029:\x07<\x02\x02:\x14\x03\x02\x02\x02;<\x07.\x02\x02<\x16\x03\x02\x02" +
		"\x02=>\x07%\x02\x02>\x18\x03\x02\x02\x02?@\x07&\x02\x02@\x1A\x03\x02\x02" +
		"\x02AB\x07=\x02\x02BC\x03\x02\x02\x02CD\b\x0E\x02\x02D\x1C\x03\x02\x02" +
		"\x02EG\t\x02\x02\x02FE\x03\x02\x02\x02GH\x03\x02\x02\x02HF\x03\x02\x02" +
		"\x02HI\x03\x02\x02\x02IM\x03\x02\x02\x02JL\t\x03\x02\x02KJ\x03\x02\x02" +
		"\x02LO\x03\x02\x02\x02MK\x03\x02\x02\x02MN\x03\x02\x02\x02N\x1E\x03\x02" +
		"\x02\x02OM\x03\x02\x02\x02PR\x07)\x02\x02QS\n\x04\x02\x02RQ\x03\x02\x02" +
		"\x02ST\x03\x02\x02\x02TR\x03\x02\x02\x02TU\x03\x02\x02\x02UV\x03\x02\x02" +
		"\x02VW\x07)\x02\x02W \x03\x02\x02\x02XZ\x07$\x02\x02Y[\n\x05\x02\x02Z" +
		"Y\x03\x02\x02\x02[\\\x03\x02\x02\x02\\Z\x03\x02\x02\x02\\]\x03\x02\x02" +
		"\x02]^\x03\x02\x02\x02^_\x07$\x02\x02_\"\x03\x02\x02\x02`b\t\x06\x02\x02" +
		"a`\x03\x02\x02\x02bc\x03\x02\x02\x02ca\x03\x02\x02\x02cd\x03\x02\x02\x02" +
		"d$\x03\x02\x02\x02eg\t\x07\x02\x02fe\x03\x02\x02\x02gh\x03\x02\x02\x02" +
		"hf\x03\x02\x02\x02hi\x03\x02\x02\x02ij\x03\x02\x02\x02jk\b\x13\x02\x02" +
		"k&\x03\x02\x02\x02lm\x071\x02\x02mn\x071\x02\x02nr\x03\x02\x02\x02oq\n" +
		"\b\x02\x02po\x03\x02\x02\x02qt\x03\x02\x02\x02rp\x03\x02\x02\x02rs\x03" +
		"\x02\x02\x02su\x03\x02\x02\x02tr\x03\x02\x02\x02uv\b\x14\x02\x02v(\x03" +
		"\x02\x02\x02\n\x02HMT\\chr\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!subjektLexer.__ATN) {
			subjektLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(subjektLexer._serializedATN));
		}

		return subjektLexer.__ATN;
	}

}

